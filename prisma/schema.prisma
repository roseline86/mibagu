datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  userId            String    @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  name               String?
  email              String?   @unique
  password           String?
  emailVerified      DateTime?
  image              String?
  verificationCode   String?
  status             String?
  createdAt          DateTime   @default(now())
  bio                String?
  facebook           String?
  twitter            String?
  instagram          String?
  linkedin           String?
  github             String?
  accounts           Account[]
  sessions           Session[]
  posts              Post[]
}


model Post {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  content       String
  category      String
  coverImage    String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  authorId      String         @db.ObjectId
  author        User           @relation(fields: [authorId], references: [id])
  comments      Comment[]
}

model Comment {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String
  comment   String
  postId    String
  createdAt DateTime @default(now())
  post      Post    @relation(fields: [postId], references: [id])
}


model Ads {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  cta           String
  link          String
  description   String
  coverImage    String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

}


model Poll {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  question  String
  type      String   // To distinguish between 'poll' and 'survey'
  options   String[] // Options for polls
  responses String[] @default([]) // Responses submitted by users
  voters    String[] @default([]) // List of users or IPs who have voted
  createdAt DateTime @default(now())
}
